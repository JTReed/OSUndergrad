typedef struct datablock
{
	char names[DIR_ENT_COUNT][252];
	int inums[DIR_ENT_COUNT];
}
datablock;

int handle_read(int fd, int inum, int block, int *output_size, void **output)
{
	inode read_node;

	printf("HANDLE READ\n");

	if(inum < 0 || inum >= BITMAP_COUNT)
	{
		printf("handle_read: invalid inum\n");

		return -1;
	}

	if(block < 0 || block >= DATA_COUNT)
	{
		printf("invalid block\n");

		return -1;
	}

	/* Read in inode */
	lseek(fd, INODE_REGION_OFFSET+inum*sizeof(inode), SEEK_SET);
	read(fd, &read_node, sizeof(inode));
	
	if(read_node.type == MFS_REGULAR_FILE)
	{
		/* not yet implemented */
	}
	else if(read_node.type == MFS_DIRECTORY)
	{
		datablock db;

		/* Load up relevent block from inode pointers */ 
		lseek(fd, read_node.pointer[block], SEEK_SET);
		lread(fd, &db, BLOCK_SIZE);

		/* iterate through entries and copy into dir_ent */
		MFS_DirEnt_t entries[DIR_ENT_COUNT];
		int i;
		for(i = 0; i < DIR_ENT_COUNT; i++) 
		{
			MFS_DirEnt_t entry;
			strcpy(entry.name, db.names[i];
			entry.inum = db.inums[i];
			entries[i] = entry;
		}
	
		/* copy entries into buffer */
		memcpy(buffer, entries, sizeof(MFS_DirEnt_t)*DIR_ENT_COUNT);
	}

	return 0;
}


